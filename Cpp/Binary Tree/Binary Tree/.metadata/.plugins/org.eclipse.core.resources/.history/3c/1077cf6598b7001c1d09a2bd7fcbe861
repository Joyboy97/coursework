/*
 * BST.cpp
 *
 *  Created on: Apr 10, 2020
 *      Author: 13027
 */


#include "BST.hpp"
#include "TNode.hpp"
#include "Phrase.hpp"
#include <iostream>
#include <stdlib.h>
using namespace std;

BST::BST() {
	root = NULL;
}
BST::BST(string s, string l) {
	root = new TNode(s,l);
}

bool BST::insert(string s,string l) {
	 TNode *leaf= new TNode(s,l);
	 TNode *tmp=root;
	 bool t=false;
	 if(root==NULL){
		 root=leaf;
		 t=true;
	 }else{
	 while(tmp!=NULL){
		 if(tmp->data->abbr<s){
			 tmp=tmp->right;
		 }else if(tmp->data->abbr>s){
			 tmp=tmp->left;
		 }
	 }
	 tmp=tmp->parent;
	 if(tmp->data->abbr<s){
		 leaf->parent=tmp;
		tmp->right=leaf;

		//setHeight(tmp);
		t=true;
	 }else if(tmp->data->abbr>s){
		 leaf->parent=tmp;
		tmp->left= leaf;
		//setHeight(tmp);
		t=true;
	 }
	 }
	return t;
}

TNode *BST::find(string s) {
	TNode *tmp=root;
	while(tmp!=NULL){
		if(tmp->data->abbr<s){
			tmp=tmp->right;
		}else if(tmp->data->abbr>s){
			tmp=tmp->left;
		}else if(tmp->data->abbr==s){
			break;
		}
	}
	if(tmp!=NULL)
		return tmp;
	else
		return NULL;
}

void BST::setHeight(TNode *tmp) {
	while(tmp!=root){
		tmp->parent->height+=1;
		tmp=tmp->parent;
	}
}
void BST::printTreeIO() {
	if (root == NULL ) {
		cout << "Empty Tree" << endl;
	}
	else {
		cout << endl<<"Printing In Order:" <<endl;
		printTreeIO(root);
	}
}
void BST::printTreeIO(TNode *tmp) {
	if (tmp == NULL) {
		return;
	}else {
		printTreeIO(tmp->left);
		tmp->printNode();
		printTreeIO(tmp->right);
	}
}

void BST::printTreePre() {
	if (root == NULL ) {
		cout << "Empty Tree" << endl;
	}
	else {
		cout << endl<<"Printing PreOrder:" <<endl;
		printTreePre(root);
	}
}
void BST::printTreePre(TNode *tmp) {
	if (tmp == NULL) {
		return;
	}else {
		tmp->printNode();
		printTreeIO(tmp->left);
		printTreeIO(tmp->right);
	}
}

void BST::printTreePost() {
	if (root == NULL ) {
		cout << "Empty Tree" << endl;
	}
	else {
		cout << endl<<"Printing PostOrder:" <<endl;
		printTreePost(root);
	}
}

void BST::printTreePost(TNode *tmp) {
	if (tmp == NULL) {
		return;
	}else {
		printTreeIO(tmp->left);
		printTreeIO(tmp->right);
		tmp->printNode();
	}
}
void BST::clearTree() {
	if (root == NULL) {
		cout << "Tree empty" << endl;
	}
	else {
		cout << endl << "Clearing Tree:" << endl;
		clearTree(root);
		root = NULL;
	}
}
void BST::clearTree(TNode *tmp) {
	if (tmp == NULL) {
		return;
	}
	else {
		clearTree(tmp->left);
		clearTree(tmp->right);
		//tmp->printNode();  // for testing, comment back in
		delete(tmp);
	}
}

TNode *BST::removeNoKids(TNode *tmp) {
	return root;
}
TNode *BST::removeOneKid(TNode *tmp,bool leftFlag) {
	return root;
}
TNode *BST::remove(string s) {
	return root;
}

